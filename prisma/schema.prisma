// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quests        Quest[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Attachment {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  filename    String
  contentType String
  metadata    Json
  byteSize    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Quest Quest[]
  Task  Task[]
}

model Quest {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  points      Int     @default(0)
  isCompleted Boolean @default(false)
  userId      String  @db.ObjectId
  coverId     String? @db.ObjectId
  tasks       Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cover Attachment? @relation(fields: [coverId], references: [id], onDelete: SetNull)
}

model Task {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  order       Int
  isCompleted Boolean @default(false)
  code        String
  questId     String  @db.ObjectId
  imageId     String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quest Quest       @relation(fields: [questId], references: [id], onDelete: Cascade)
  image Attachment? @relation(fields: [imageId], references: [id], onDelete: SetNull)
}
