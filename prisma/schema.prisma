// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  quests        Quest[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  QuestAssignment QuestAssignment[]
  TaskAssignment  TaskAssignment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Attachment {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  contentType String
  metadata    AttachmentMetadata
  byteSize    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Quest Quest[]
  Task  Task[]

  @@unique([key])
}

type AttachmentMetadata {
  width  Int
  height Int
}

model Quest {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  isCompleted      Boolean           @default(false)
  userId           String            @db.ObjectId
  imageKey         String?
  tasks            Task[]
  questAssignments QuestAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cover          Attachment?      @relation(fields: [imageKey], references: [key], onDelete: SetNull)
  TaskAssignment TaskAssignment[]
}

model Task {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  order           Int
  code            String
  questId         String           @db.ObjectId
  imageKey        String?
  taskAssignments TaskAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quest Quest       @relation(fields: [questId], references: [id], onDelete: Cascade)
  image Attachment? @relation(fields: [imageKey], references: [key], onDelete: SetNull)

  @@unique([questId, order])
}

model QuestAssignment {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  questId        String  @db.ObjectId
  isCompleted    Boolean @default(false)
  tasksCompleted Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
}

model TaskAssignment {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  questId     String  @db.ObjectId
  taskId      String  @db.ObjectId
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}
